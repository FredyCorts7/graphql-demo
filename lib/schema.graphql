"validate level types"
enum Level {
  simple
  intermediate
  hard
}

type Course {
  _id: ID!
  title: String!
  teacher: String!
  description: String
  topic: String
  students: [Student]
  level: Level!
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "get all course"
  courses: [Course]
  "get one specific course by id"
  course(id: ID!): Course
  "get all students"
  people: [Person]
  "get one specific student by id"
  person(id: ID!): Person
}

input CourseCreateInput {
  title: String!
  teacher: String!
  description: String
  topic: String
  level: Level!
}

input CourseUpdateInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonCreateInput {
  name: String!
  email: String!
  avatar: String
  phone: String
}

input PersonUpdateInput {
  name: String
  email: String
  avatar: String
  phone: String
}

type Mutation {
  "create one course"
  createCourse(input: CourseCreateInput!): Course
  "update one course by id"
  updateCourse(id: ID!, input: CourseUpdateInput!): Course
  "create one person"
  createPerson(input: PersonCreateInput!): Person
  "update one person by id"
  updatePerson(id: ID!, input: PersonUpdateInput!): Person
  "add student to course"
  addStudent(courseId: ID!, studentId: ID!): Course
}
